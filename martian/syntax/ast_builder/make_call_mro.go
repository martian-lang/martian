package ast_builder

import "github.com/martian-lang/martian/martian/syntax"

// An object, compatible with Bindings (that is, either a string-keyed map or
// a struct), which can be used to generate a top-level call.
type CallableArgs interface {
	// CallName returns the name of this stage as defined in the .mro file.
	CallName() string
	// MroFileName returns the name of the .mro file which defines this stage.
	MroFileName() string
}

// MakeCallAst generates an ast for a top-level call mro file from an Args
// object as generated by mro2go.
func MakeCallAst(input CallableArgs) *syntax.Ast {
	bindings, err := Bindings(input)
	if err != nil {
		panic(err)
	}
	return &syntax.Ast{
		Includes: []*syntax.Include{{Value: input.MroFileName()}},
		Call: &syntax.CallStm{
			Id:       input.CallName(),
			DecId:    input.CallName(),
			Bindings: bindings,
		},
	}
}
