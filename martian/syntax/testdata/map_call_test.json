{
  "fqid": "SOME_STATIC",
  "inputs": {
    "inputs": {
      "expression": [
        1,
        3,
        4,
        5,
        7
      ],
      "type": "float[]"
    }
  },
  "outputs": {
    "expression": {
      "c_one": {
        "__reference__": "SOME_STATIC.MAPPED_CONST_SUM.sum"
      },
      "reshaped": [
        [
          1
        ],
        [
          3
        ],
        [
          4
        ],
        [
          5
        ],
        [
          7
        ]
      ],
      "v_two": {
        "__reference__": "SOME_STATIC.MAPPED_VAR_SUM.sum"
      },
      "values1": {
        "long": {
          "data": [
            1,
            3,
            4,
            5,
            7
          ],
          "mean": {
            "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
            "fork": {
              "VALUES1": "long"
            }
          },
          "std_dev": {
            "__reference__": "SOME_STATIC.VALUES1.STD_DEV.z",
            "fork": {
              "VALUES1": "long"
            }
          }
        },
        "short": {
          "data": [
            3
          ],
          "mean": {
            "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
            "fork": {
              "VALUES1": "short"
            }
          },
          "std_dev": {
            "__reference__": "SOME_STATIC.VALUES1.STD_DEV.z",
            "fork": {
              "VALUES1": "short"
            }
          }
        }
      },
      "values2": {
        "data": {
          "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
          "mode": "array",
          "merge_value": {
            "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
            "fork": {
              "POW": "unknown"
            }
          },
          "merge_over": {
            "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
            "type": "int[]"
          }
        },
        "mean": {
          "__reference__": "SOME_STATIC.VALUES2.MEAN.MULTIPLY.product"
        },
        "std_dev": {
          "__reference__": "SOME_STATIC.VALUES2.STD_DEV.z"
        }
      }
    },
    "type": "SOME_STATIC"
  },
  "children": [
    {
      "fqid": "SOME_STATIC.LEN",
      "comments": [
        "Abuses POW and SUM to compute the length of an array."
      ],
      "inputs": {
        "x": {
          "expression": [
            1,
            2,
            3,
            4,
            5
          ],
          "type": "float[]"
        }
      },
      "outputs": {
        "expression": {
          "len": {
            "__reference__": "SOME_STATIC.LEN.SUM.sum"
          }
        },
        "type": "LEN"
      },
      "children": [
        {
          "fqid": "SOME_STATIC.LEN.ONES",
          "inputs": {
            "x": {
              "expression": {
                "call": "ONES",
                "mode": "array",
                "split": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              },
              "type": "float"
            },
            "y": {
              "expression": 0,
              "type": "float"
            }
          },
          "outputs": {
            "expression": [
              {
                "__reference__": "SOME_STATIC.LEN.ONES",
                "fork": {
                  "ONES": 0
                }
              },
              {
                "__reference__": "SOME_STATIC.LEN.ONES",
                "fork": {
                  "ONES": 1
                }
              },
              {
                "__reference__": "SOME_STATIC.LEN.ONES",
                "fork": {
                  "ONES": 2
                }
              },
              {
                "__reference__": "SOME_STATIC.LEN.ONES",
                "fork": {
                  "ONES": 3
                }
              },
              {
                "__reference__": "SOME_STATIC.LEN.ONES",
                "fork": {
                  "ONES": 4
                }
              }
            ],
            "type": "POW[]"
          },
          "fork_roots": [
            "SOME_STATIC.LEN.ONES"
          ]
        },
        {
          "fqid": "SOME_STATIC.LEN.SUM",
          "inputs": {
            "x": {
              "expression": [
                {
                  "__reference__": "SOME_STATIC.LEN.ONES.z",
                  "fork": {
                    "ONES": 0
                  }
                },
                {
                  "__reference__": "SOME_STATIC.LEN.ONES.z",
                  "fork": {
                    "ONES": 1
                  }
                },
                {
                  "__reference__": "SOME_STATIC.LEN.ONES.z",
                  "fork": {
                    "ONES": 2
                  }
                },
                {
                  "__reference__": "SOME_STATIC.LEN.ONES.z",
                  "fork": {
                    "ONES": 3
                  }
                },
                {
                  "__reference__": "SOME_STATIC.LEN.ONES.z",
                  "fork": {
                    "ONES": 4
                  }
                }
              ],
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.LEN.SUM"
            },
            "type": "SUM"
          }
        }
      ]
    },
    {
      "fqid": "SOME_STATIC.SUM",
      "inputs": {
        "x": {
          "expression": [
            {
              "__reference__": "SOME_STATIC.LEN.SUM.sum"
            },
            -3
          ],
          "type": "float[]"
        }
      },
      "outputs": {
        "expression": {
          "__reference__": "SOME_STATIC.SUM"
        },
        "type": "SUM"
      }
    },
    {
      "fqid": "SOME_STATIC.GENERATE_DISTRIBUTION",
      "inputs": {
        "count": {
          "expression": {
            "__reference__": "SOME_STATIC.SUM.sum"
          },
          "type": "float"
        }
      },
      "outputs": {
        "expression": {
          "values": {
            "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
            "mode": "array",
            "merge_value": {
              "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
              "fork": {
                "POW": "unknown"
              }
            },
            "merge_over": {
              "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
              "type": "int[]"
            }
          }
        },
        "type": "GENERATE_DISTRIBUTION"
      },
      "children": [
        {
          "fqid": "SOME_STATIC.GENERATE_DISTRIBUTION._BEGIN_CONST",
          "comments": [
            "This is a hacky way of introducing a constant into mro.  Users should",
            "be encoraged to make such values parameters to pipelines instead."
          ],
          "inputs": null,
          "outputs": {
            "expression": {
              "begin": 3
            },
            "type": "_BEGIN_CONST"
          },
          "children": null
        },
        {
          "fqid": "SOME_STATIC.GENERATE_DISTRIBUTION.SUM",
          "inputs": {
            "x": {
              "expression": [
                3,
                {
                  "__reference__": "SOME_STATIC.SUM.sum"
                }
              ],
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.SUM"
            },
            "type": "SUM"
          }
        },
        {
          "fqid": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE",
          "inputs": {
            "begin": {
              "expression": 3,
              "type": "float"
            },
            "end": {
              "expression": {
                "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.SUM.sum"
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE"
            },
            "type": "RANGE"
          }
        },
        {
          "fqid": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
          "inputs": {
            "x": {
              "expression": {
                "call": "POW",
                "mode": "array",
                "split": {
                  "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values"
                }
              },
              "type": "float"
            },
            "y": {
              "expression": 2,
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
              "mode": "array",
              "merge_value": {
                "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
                "fork": {
                  "POW": "unknown"
                }
              },
              "merge_over": {
                "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                "type": "int[]"
              }
            },
            "type": "POW[]"
          },
          "fork_roots": [
            "SOME_STATIC.GENERATE_DISTRIBUTION.POW"
          ]
        }
      ]
    },
    {
      "fqid": "SOME_STATIC._IDENTITY",
      "inputs": {
        "inputs": {
          "expression": {
            "call": "_IDENTITY",
            "mode": "map",
            "split": {
              "long": [
                1,
                3,
                4,
                5,
                7
              ],
              "short": [
                3
              ]
            }
          },
          "type": "float[]"
        }
      },
      "outputs": {
        "expression": {
          "long": {
            "inputs": [
              1,
              3,
              4,
              5,
              7
            ]
          },
          "short": {
            "inputs": [
              3
            ]
          }
        },
        "type": "map<_IDENTITY>"
      },
      "children": null
    },
    {
      "fqid": "SOME_STATIC.VALUES1",
      "comments": [
        "Call here has static inputs"
      ],
      "inputs": {
        "data": {
          "expression": {
            "call": "VALUES1",
            "mode": "map",
            "split": {
              "long": [
                1,
                3,
                4,
                5,
                7
              ],
              "short": [
                3
              ]
            }
          },
          "type": "float[]"
        }
      },
      "outputs": {
        "expression": {
          "long": {
            "data": [
              1,
              3,
              4,
              5,
              7
            ],
            "mean": {
              "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
              "fork": {
                "VALUES1": "long"
              }
            },
            "std_dev": {
              "__reference__": "SOME_STATIC.VALUES1.STD_DEV.z",
              "fork": {
                "VALUES1": "long"
              }
            }
          },
          "short": {
            "data": [
              3
            ],
            "mean": {
              "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
              "fork": {
                "VALUES1": "short"
              }
            },
            "std_dev": {
              "__reference__": "SOME_STATIC.VALUES1.STD_DEV.z",
              "fork": {
                "VALUES1": "short"
              }
            }
          }
        },
        "type": "map<STATISTICS>"
      },
      "children": [
        {
          "fqid": "SOME_STATIC.VALUES1.SUM",
          "inputs": {
            "x": {
              "expression": {
                "call": "VALUES1",
                "mode": "map",
                "split": {
                  "long": [
                    1,
                    3,
                    4,
                    5,
                    7
                  ],
                  "short": [
                    3
                  ]
                }
              },
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.VALUES1.SUM",
              "fork": {
                "VALUES1": "unknown"
              }
            },
            "type": "SUM"
          },
          "fork_roots": [
            "SOME_STATIC.VALUES1"
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES1.LEN",
          "comments": [
            "Abuses POW and SUM to compute the length of an array."
          ],
          "inputs": {
            "x": {
              "expression": {
                "call": "VALUES1",
                "mode": "map",
                "split": {
                  "long": [
                    1,
                    3,
                    4,
                    5,
                    7
                  ],
                  "short": [
                    3
                  ]
                }
              },
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "long": {
                "len": {
                  "__reference__": "SOME_STATIC.VALUES1.LEN.SUM.sum",
                  "fork": {
                    "VALUES1": "long"
                  }
                }
              },
              "short": {
                "len": {
                  "__reference__": "SOME_STATIC.VALUES1.LEN.SUM.sum",
                  "fork": {
                    "VALUES1": "short"
                  }
                }
              }
            },
            "type": "map<LEN>"
          },
          "children": [
            {
              "fqid": "SOME_STATIC.VALUES1.LEN.ONES",
              "inputs": {
                "x": {
                  "expression": {
                    "call": "ONES",
                    "mode": "array",
                    "split": {
                      "call": "VALUES1",
                      "mode": "map",
                      "split": {
                        "long": [
                          1,
                          3,
                          4,
                          5,
                          7
                        ],
                        "short": [
                          3
                        ]
                      }
                    }
                  },
                  "type": "float"
                },
                "y": {
                  "expression": 0,
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "call": "SOME_STATIC.VALUES1.LEN.ONES",
                  "mode": "array",
                  "merge_value": {
                    "__reference__": "SOME_STATIC.VALUES1.LEN.ONES",
                    "fork": {
                      "ONES": "unknown",
                      "VALUES1": "unknown"
                    }
                  },
                  "merge_over": {
                    "call": "VALUES1",
                    "mode": "map",
                    "split": {
                      "long": [
                        1,
                        3,
                        4,
                        5,
                        7
                      ],
                      "short": [
                        3
                      ]
                    }
                  }
                },
                "type": "POW[]"
              },
              "fork_roots": [
                "SOME_STATIC.VALUES1",
                "SOME_STATIC.VALUES1.LEN.ONES"
              ]
            },
            {
              "fqid": "SOME_STATIC.VALUES1.LEN.SUM",
              "inputs": {
                "x": {
                  "expression": {
                    "call": "SOME_STATIC.VALUES1.LEN.ONES",
                    "mode": "array",
                    "merge_value": {
                      "__reference__": "SOME_STATIC.VALUES1.LEN.ONES.z",
                      "fork": {
                        "ONES": "unknown",
                        "VALUES1": "unknown"
                      }
                    },
                    "merge_over": {
                      "call": "VALUES1",
                      "mode": "map",
                      "split": {
                        "long": [
                          1,
                          3,
                          4,
                          5,
                          7
                        ],
                        "short": [
                          3
                        ]
                      }
                    }
                  },
                  "type": "float[]"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES1.LEN.SUM",
                  "fork": {
                    "VALUES1": "unknown"
                  }
                },
                "type": "SUM"
              },
              "fork_roots": [
                "SOME_STATIC.VALUES1"
              ]
            }
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES1.MEAN",
          "inputs": {
            "x": {
              "expression": {
                "call": "VALUES1",
                "mode": "map",
                "split": {
                  "long": {
                    "__reference__": "SOME_STATIC.VALUES1.SUM.sum",
                    "fork": {
                      "VALUES1": "long"
                    }
                  },
                  "short": {
                    "__reference__": "SOME_STATIC.VALUES1.SUM.sum",
                    "fork": {
                      "VALUES1": "short"
                    }
                  }
                }
              },
              "type": "float"
            },
            "y": {
              "expression": {
                "call": "VALUES1",
                "mode": "map",
                "split": {
                  "long": {
                    "__reference__": "SOME_STATIC.VALUES1.LEN.SUM.sum",
                    "fork": {
                      "VALUES1": "long"
                    }
                  },
                  "short": {
                    "__reference__": "SOME_STATIC.VALUES1.LEN.SUM.sum",
                    "fork": {
                      "VALUES1": "short"
                    }
                  }
                }
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "long": {
                "z": {
                  "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
                  "fork": {
                    "VALUES1": "long"
                  }
                }
              },
              "short": {
                "z": {
                  "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
                  "fork": {
                    "VALUES1": "short"
                  }
                }
              }
            },
            "type": "map<DIVIDE>"
          },
          "children": [
            {
              "fqid": "SOME_STATIC.VALUES1.MEAN.POW",
              "inputs": {
                "x": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES1.LEN.SUM.sum",
                    "fork": {
                      "VALUES1": "unknown"
                    }
                  },
                  "type": "float"
                },
                "y": {
                  "expression": -1,
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES1.MEAN.POW",
                  "fork": {
                    "VALUES1": "unknown"
                  }
                },
                "type": "POW"
              },
              "fork_roots": [
                "SOME_STATIC.VALUES1"
              ]
            },
            {
              "fqid": "SOME_STATIC.VALUES1.MEAN.MULTIPLY",
              "inputs": {
                "x": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES1.SUM.sum",
                    "fork": {
                      "VALUES1": "unknown"
                    }
                  },
                  "type": "float"
                },
                "y": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES1.MEAN.POW.z",
                    "fork": {
                      "VALUES1": "unknown"
                    }
                  },
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY",
                  "fork": {
                    "VALUES1": "unknown"
                  }
                },
                "type": "MULTIPLY"
              },
              "fork_roots": [
                "SOME_STATIC.VALUES1"
              ]
            }
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES1.ERROR",
          "inputs": {
            "actual": {
              "expression": {
                "call": "ERROR",
                "mode": "array",
                "split": {
                  "call": "VALUES1",
                  "mode": "map",
                  "split": {
                    "long": [
                      1,
                      3,
                      4,
                      5,
                      7
                    ],
                    "short": [
                      3
                    ]
                  }
                }
              },
              "type": "float"
            },
            "expect": {
              "expression": {
                "call": "VALUES1",
                "mode": "map",
                "split": {
                  "long": {
                    "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
                    "fork": {
                      "VALUES1": "long"
                    }
                  },
                  "short": {
                    "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
                    "fork": {
                      "VALUES1": "short"
                    }
                  }
                }
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "long": [
                {
                  "error": {
                    "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": 0,
                      "VALUES1": "long"
                    }
                  }
                },
                {
                  "error": {
                    "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": 1,
                      "VALUES1": "long"
                    }
                  }
                },
                {
                  "error": {
                    "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": 2,
                      "VALUES1": "long"
                    }
                  }
                },
                {
                  "error": {
                    "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": 3,
                      "VALUES1": "long"
                    }
                  }
                },
                {
                  "error": {
                    "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": 4,
                      "VALUES1": "long"
                    }
                  }
                }
              ],
              "short": [
                {
                  "error": {
                    "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": 0,
                      "VALUES1": "short"
                    }
                  }
                }
              ]
            },
            "type": "map<ERROR[]>"
          },
          "children": [
            {
              "fqid": "SOME_STATIC.VALUES1.ERROR.SUBTRACT",
              "inputs": {
                "x": {
                  "expression": {
                    "call": "ERROR",
                    "mode": "array",
                    "split": {
                      "call": "VALUES1",
                      "mode": "map",
                      "split": {
                        "long": [
                          1,
                          3,
                          4,
                          5,
                          7
                        ],
                        "short": [
                          3
                        ]
                      }
                    }
                  },
                  "type": "float"
                },
                "y": {
                  "expression": {
                    "call": "VALUES1",
                    "mode": "map",
                    "split": {
                      "long": {
                        "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
                        "fork": {
                          "VALUES1": "long"
                        }
                      },
                      "short": {
                        "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
                        "fork": {
                          "VALUES1": "short"
                        }
                      }
                    }
                  },
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "long": [
                    {
                      "z": {
                        "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                        "fork": {
                          "ERROR": 0,
                          "VALUES1": "long"
                        }
                      }
                    },
                    {
                      "z": {
                        "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                        "fork": {
                          "ERROR": 1,
                          "VALUES1": "long"
                        }
                      }
                    },
                    {
                      "z": {
                        "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                        "fork": {
                          "ERROR": 2,
                          "VALUES1": "long"
                        }
                      }
                    },
                    {
                      "z": {
                        "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                        "fork": {
                          "ERROR": 3,
                          "VALUES1": "long"
                        }
                      }
                    },
                    {
                      "z": {
                        "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                        "fork": {
                          "ERROR": 4,
                          "VALUES1": "long"
                        }
                      }
                    }
                  ],
                  "short": [
                    {
                      "z": {
                        "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                        "fork": {
                          "ERROR": 0,
                          "VALUES1": "short"
                        }
                      }
                    }
                  ]
                },
                "type": "map<SUBTRACT[]>"
              },
              "children": [
                {
                  "fqid": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.NEG_Y",
                  "inputs": {
                    "x": {
                      "expression": {
                        "__reference__": "SOME_STATIC.VALUES1.MEAN.MULTIPLY.product",
                        "fork": {
                          "VALUES1": "unknown"
                        }
                      },
                      "type": "float"
                    },
                    "y": {
                      "expression": -1,
                      "type": "float"
                    }
                  },
                  "outputs": {
                    "expression": {
                      "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.NEG_Y",
                      "fork": {
                        "VALUES1": "unknown"
                      }
                    },
                    "type": "MULTIPLY"
                  },
                  "fork_roots": [
                    "SOME_STATIC.VALUES1"
                  ]
                },
                {
                  "fqid": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM",
                  "inputs": {
                    "x": {
                      "expression": [
                        {
                          "call": "ERROR",
                          "mode": "array",
                          "split": {
                            "call": "VALUES1",
                            "mode": "map",
                            "split": {
                              "long": [
                                1,
                                3,
                                4,
                                5,
                                7
                              ],
                              "short": [
                                3
                              ]
                            }
                          }
                        },
                        {
                          "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.NEG_Y.product",
                          "fork": {
                            "VALUES1": "unknown"
                          }
                        }
                      ],
                      "type": "float[]"
                    }
                  },
                  "outputs": {
                    "expression": {
                      "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM",
                      "fork": {
                        "ERROR": "unknown",
                        "VALUES1": "unknown"
                      }
                    },
                    "type": "SUM"
                  },
                  "fork_roots": [
                    "SOME_STATIC.VALUES1",
                    "SOME_STATIC.VALUES1.ERROR"
                  ]
                }
              ]
            }
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES1.SQUARED_ERROR",
          "comments": [
            "Not using POW here because we want to test fusing two arrays."
          ],
          "inputs": {
            "x": {
              "expression": {
                "call": "SQUARED_ERROR",
                "mode": "array",
                "split": {
                  "call": "SOME_STATIC.VALUES1.ERROR",
                  "mode": "array",
                  "merge_value": {
                    "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": "unknown",
                      "VALUES1": "unknown"
                    }
                  },
                  "merge_over": {
                    "call": "VALUES1",
                    "mode": "map",
                    "split": {
                      "long": [
                        1,
                        3,
                        4,
                        5,
                        7
                      ],
                      "short": [
                        3
                      ]
                    }
                  },
                  "fork_node": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM"
                }
              },
              "type": "float"
            },
            "y": {
              "expression": {
                "call": "SQUARED_ERROR",
                "mode": "array",
                "split": {
                  "call": "SOME_STATIC.VALUES1.ERROR",
                  "mode": "array",
                  "merge_value": {
                    "__reference__": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": "unknown",
                      "VALUES1": "unknown"
                    }
                  },
                  "merge_over": {
                    "call": "VALUES1",
                    "mode": "map",
                    "split": {
                      "long": [
                        1,
                        3,
                        4,
                        5,
                        7
                      ],
                      "short": [
                        3
                      ]
                    }
                  },
                  "fork_node": "SOME_STATIC.VALUES1.ERROR.SUBTRACT.SUM"
                }
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "call": "SOME_STATIC.VALUES1.SQUARED_ERROR",
              "mode": "array",
              "merge_value": {
                "__reference__": "SOME_STATIC.VALUES1.SQUARED_ERROR",
                "fork": {
                  "SQUARED_ERROR": "unknown",
                  "VALUES1": "unknown"
                }
              },
              "merge_over": {
                "call": "VALUES1",
                "mode": "map",
                "split": {
                  "long": [
                    1,
                    3,
                    4,
                    5,
                    7
                  ],
                  "short": [
                    3
                  ]
                }
              }
            },
            "type": "MULTIPLY[]"
          },
          "fork_roots": [
            "SOME_STATIC.VALUES1",
            "SOME_STATIC.VALUES1.SQUARED_ERROR"
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES1.TOTAL_VARIANCE",
          "inputs": {
            "x": {
              "expression": {
                "call": "SOME_STATIC.VALUES1.SQUARED_ERROR",
                "mode": "array",
                "merge_value": {
                  "__reference__": "SOME_STATIC.VALUES1.SQUARED_ERROR.product",
                  "fork": {
                    "SQUARED_ERROR": "unknown",
                    "VALUES1": "unknown"
                  }
                },
                "merge_over": {
                  "call": "VALUES1",
                  "mode": "map",
                  "split": {
                    "long": [
                      1,
                      3,
                      4,
                      5,
                      7
                    ],
                    "short": [
                      3
                    ]
                  }
                }
              },
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.VALUES1.TOTAL_VARIANCE",
              "fork": {
                "VALUES1": "unknown"
              }
            },
            "type": "SUM"
          },
          "fork_roots": [
            "SOME_STATIC.VALUES1"
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES1.VARIANCE",
          "inputs": {
            "x": {
              "expression": {
                "call": "VALUES1",
                "mode": "map",
                "split": {
                  "long": {
                    "__reference__": "SOME_STATIC.VALUES1.TOTAL_VARIANCE.sum",
                    "fork": {
                      "VALUES1": "long"
                    }
                  },
                  "short": {
                    "__reference__": "SOME_STATIC.VALUES1.TOTAL_VARIANCE.sum",
                    "fork": {
                      "VALUES1": "short"
                    }
                  }
                }
              },
              "type": "float"
            },
            "y": {
              "expression": {
                "call": "VALUES1",
                "mode": "map",
                "split": {
                  "long": {
                    "__reference__": "SOME_STATIC.VALUES1.LEN.SUM.sum",
                    "fork": {
                      "VALUES1": "long"
                    }
                  },
                  "short": {
                    "__reference__": "SOME_STATIC.VALUES1.LEN.SUM.sum",
                    "fork": {
                      "VALUES1": "short"
                    }
                  }
                }
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "long": {
                "z": {
                  "__reference__": "SOME_STATIC.VALUES1.VARIANCE.MULTIPLY.product",
                  "fork": {
                    "VALUES1": "long"
                  }
                }
              },
              "short": {
                "z": {
                  "__reference__": "SOME_STATIC.VALUES1.VARIANCE.MULTIPLY.product",
                  "fork": {
                    "VALUES1": "short"
                  }
                }
              }
            },
            "type": "map<DIVIDE>"
          },
          "children": [
            {
              "fqid": "SOME_STATIC.VALUES1.VARIANCE.POW",
              "inputs": {
                "x": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES1.LEN.SUM.sum",
                    "fork": {
                      "VALUES1": "unknown"
                    }
                  },
                  "type": "float"
                },
                "y": {
                  "expression": -1,
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES1.VARIANCE.POW",
                  "fork": {
                    "VALUES1": "unknown"
                  }
                },
                "type": "POW"
              },
              "fork_roots": [
                "SOME_STATIC.VALUES1"
              ]
            },
            {
              "fqid": "SOME_STATIC.VALUES1.VARIANCE.MULTIPLY",
              "inputs": {
                "x": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES1.TOTAL_VARIANCE.sum",
                    "fork": {
                      "VALUES1": "unknown"
                    }
                  },
                  "type": "float"
                },
                "y": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES1.VARIANCE.POW.z",
                    "fork": {
                      "VALUES1": "unknown"
                    }
                  },
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES1.VARIANCE.MULTIPLY",
                  "fork": {
                    "VALUES1": "unknown"
                  }
                },
                "type": "MULTIPLY"
              },
              "fork_roots": [
                "SOME_STATIC.VALUES1"
              ]
            }
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES1.STD_DEV",
          "inputs": {
            "x": {
              "expression": {
                "__reference__": "SOME_STATIC.VALUES1.VARIANCE.MULTIPLY.product",
                "fork": {
                  "VALUES1": "unknown"
                }
              },
              "type": "float"
            },
            "y": {
              "expression": 0.5,
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.VALUES1.STD_DEV",
              "fork": {
                "VALUES1": "unknown"
              }
            },
            "type": "POW"
          },
          "fork_roots": [
            "SOME_STATIC.VALUES1"
          ]
        }
      ]
    },
    {
      "fqid": "SOME_STATIC.VALUES2",
      "comments": [
        "Call here has dynamic inputs"
      ],
      "inputs": {
        "data": {
          "expression": {
            "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
            "mode": "array",
            "merge_value": {
              "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
              "fork": {
                "POW": "unknown"
              }
            },
            "merge_over": {
              "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
              "type": "int[]"
            }
          },
          "type": "float[]"
        }
      },
      "outputs": {
        "expression": {
          "data": {
            "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
            "mode": "array",
            "merge_value": {
              "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
              "fork": {
                "POW": "unknown"
              }
            },
            "merge_over": {
              "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
              "type": "int[]"
            }
          },
          "mean": {
            "__reference__": "SOME_STATIC.VALUES2.MEAN.MULTIPLY.product"
          },
          "std_dev": {
            "__reference__": "SOME_STATIC.VALUES2.STD_DEV.z"
          }
        },
        "type": "STATISTICS"
      },
      "children": [
        {
          "fqid": "SOME_STATIC.VALUES2.SUM",
          "inputs": {
            "x": {
              "expression": {
                "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
                "mode": "array",
                "merge_value": {
                  "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                  "fork": {
                    "POW": "unknown"
                  }
                },
                "merge_over": {
                  "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                  "type": "int[]"
                }
              },
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.VALUES2.SUM"
            },
            "type": "SUM"
          }
        },
        {
          "fqid": "SOME_STATIC.VALUES2.LEN",
          "comments": [
            "Abuses POW and SUM to compute the length of an array."
          ],
          "inputs": {
            "x": {
              "expression": {
                "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
                "mode": "array",
                "merge_value": {
                  "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                  "fork": {
                    "POW": "unknown"
                  }
                },
                "merge_over": {
                  "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                  "type": "int[]"
                }
              },
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "len": {
                "__reference__": "SOME_STATIC.VALUES2.LEN.SUM.sum"
              }
            },
            "type": "LEN"
          },
          "children": [
            {
              "fqid": "SOME_STATIC.VALUES2.LEN.ONES",
              "inputs": {
                "x": {
                  "expression": {
                    "call": "ONES",
                    "mode": "array",
                    "split": {
                      "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
                      "mode": "array",
                      "merge_value": {
                        "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                        "fork": {
                          "POW": "unknown"
                        }
                      },
                      "merge_over": {
                        "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                        "type": "int[]"
                      }
                    }
                  },
                  "type": "float"
                },
                "y": {
                  "expression": 0,
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "call": "SOME_STATIC.VALUES2.LEN.ONES",
                  "mode": "array",
                  "merge_value": {
                    "__reference__": "SOME_STATIC.VALUES2.LEN.ONES",
                    "fork": {
                      "ONES": "unknown"
                    }
                  },
                  "merge_over": {
                    "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                    "type": "int[]"
                  }
                },
                "type": "POW[]"
              },
              "fork_roots": [
                "SOME_STATIC.VALUES2.LEN.ONES"
              ]
            },
            {
              "fqid": "SOME_STATIC.VALUES2.LEN.SUM",
              "inputs": {
                "x": {
                  "expression": {
                    "call": "SOME_STATIC.VALUES2.LEN.ONES",
                    "mode": "array",
                    "merge_value": {
                      "__reference__": "SOME_STATIC.VALUES2.LEN.ONES.z",
                      "fork": {
                        "ONES": "unknown"
                      }
                    },
                    "merge_over": {
                      "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                      "type": "int[]"
                    }
                  },
                  "type": "float[]"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES2.LEN.SUM"
                },
                "type": "SUM"
              }
            }
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES2.MEAN",
          "inputs": {
            "x": {
              "expression": {
                "__reference__": "SOME_STATIC.VALUES2.SUM.sum"
              },
              "type": "float"
            },
            "y": {
              "expression": {
                "__reference__": "SOME_STATIC.VALUES2.LEN.SUM.sum"
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "z": {
                "__reference__": "SOME_STATIC.VALUES2.MEAN.MULTIPLY.product"
              }
            },
            "type": "DIVIDE"
          },
          "children": [
            {
              "fqid": "SOME_STATIC.VALUES2.MEAN.POW",
              "inputs": {
                "x": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES2.LEN.SUM.sum"
                  },
                  "type": "float"
                },
                "y": {
                  "expression": -1,
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES2.MEAN.POW"
                },
                "type": "POW"
              }
            },
            {
              "fqid": "SOME_STATIC.VALUES2.MEAN.MULTIPLY",
              "inputs": {
                "x": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES2.SUM.sum"
                  },
                  "type": "float"
                },
                "y": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES2.MEAN.POW.z"
                  },
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES2.MEAN.MULTIPLY"
                },
                "type": "MULTIPLY"
              }
            }
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES2.ERROR",
          "inputs": {
            "actual": {
              "expression": {
                "call": "ERROR",
                "mode": "array",
                "split": {
                  "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
                  "mode": "array",
                  "merge_value": {
                    "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                    "fork": {
                      "POW": "unknown"
                    }
                  },
                  "merge_over": {
                    "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                    "type": "int[]"
                  }
                }
              },
              "type": "float"
            },
            "expect": {
              "expression": {
                "__reference__": "SOME_STATIC.VALUES2.MEAN.MULTIPLY.product"
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "error": {
                "__reference__": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.SUM.sum",
                "fork": {
                  "ERROR": "unknown"
                }
              }
            },
            "type": "ERROR"
          },
          "fork_roots": [
            "SOME_STATIC.VALUES2.ERROR"
          ],
          "children": [
            {
              "fqid": "SOME_STATIC.VALUES2.ERROR.SUBTRACT",
              "inputs": {
                "x": {
                  "expression": {
                    "call": "ERROR",
                    "mode": "array",
                    "split": {
                      "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
                      "mode": "array",
                      "merge_value": {
                        "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                        "fork": {
                          "POW": "unknown"
                        }
                      },
                      "merge_over": {
                        "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                        "type": "int[]"
                      }
                    }
                  },
                  "type": "float"
                },
                "y": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES2.MEAN.MULTIPLY.product"
                  },
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "z": {
                    "__reference__": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": "unknown"
                    }
                  }
                },
                "type": "SUBTRACT"
              },
              "fork_roots": [
                "SOME_STATIC.VALUES2.ERROR"
              ],
              "children": [
                {
                  "fqid": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.NEG_Y",
                  "inputs": {
                    "x": {
                      "expression": {
                        "__reference__": "SOME_STATIC.VALUES2.MEAN.MULTIPLY.product"
                      },
                      "type": "float"
                    },
                    "y": {
                      "expression": -1,
                      "type": "float"
                    }
                  },
                  "outputs": {
                    "expression": {
                      "__reference__": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.NEG_Y"
                    },
                    "type": "MULTIPLY"
                  }
                },
                {
                  "fqid": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.SUM",
                  "inputs": {
                    "x": {
                      "expression": [
                        {
                          "call": "ERROR",
                          "mode": "array",
                          "split": {
                            "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
                            "mode": "array",
                            "merge_value": {
                              "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                              "fork": {
                                "POW": "unknown"
                              }
                            },
                            "merge_over": {
                              "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                              "type": "int[]"
                            }
                          }
                        },
                        {
                          "__reference__": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.NEG_Y.product"
                        }
                      ],
                      "type": "float[]"
                    }
                  },
                  "outputs": {
                    "expression": {
                      "__reference__": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.SUM",
                      "fork": {
                        "ERROR": "unknown"
                      }
                    },
                    "type": "SUM"
                  },
                  "fork_roots": [
                    "SOME_STATIC.VALUES2.ERROR"
                  ]
                }
              ]
            }
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES2.SQUARED_ERROR",
          "comments": [
            "Not using POW here because we want to test fusing two arrays."
          ],
          "inputs": {
            "x": {
              "expression": {
                "call": "SQUARED_ERROR",
                "mode": "array",
                "split": {
                  "call": "SOME_STATIC.VALUES2.ERROR",
                  "mode": "array",
                  "merge_value": {
                    "__reference__": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": "unknown"
                    }
                  },
                  "merge_over": {
                    "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                    "type": "int[]"
                  },
                  "fork_node": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.SUM"
                }
              },
              "type": "float"
            },
            "y": {
              "expression": {
                "call": "SQUARED_ERROR",
                "mode": "array",
                "split": {
                  "call": "SOME_STATIC.VALUES2.ERROR",
                  "mode": "array",
                  "merge_value": {
                    "__reference__": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.SUM.sum",
                    "fork": {
                      "ERROR": "unknown"
                    }
                  },
                  "merge_over": {
                    "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                    "type": "int[]"
                  },
                  "fork_node": "SOME_STATIC.VALUES2.ERROR.SUBTRACT.SUM"
                }
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "call": "SOME_STATIC.VALUES2.SQUARED_ERROR",
              "mode": "array",
              "merge_value": {
                "__reference__": "SOME_STATIC.VALUES2.SQUARED_ERROR",
                "fork": {
                  "SQUARED_ERROR": "unknown"
                }
              },
              "merge_over": {
                "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                "type": "int[]"
              }
            },
            "type": "MULTIPLY[]"
          },
          "fork_roots": [
            "SOME_STATIC.VALUES2.SQUARED_ERROR"
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES2.TOTAL_VARIANCE",
          "inputs": {
            "x": {
              "expression": {
                "call": "SOME_STATIC.VALUES2.SQUARED_ERROR",
                "mode": "array",
                "merge_value": {
                  "__reference__": "SOME_STATIC.VALUES2.SQUARED_ERROR.product",
                  "fork": {
                    "SQUARED_ERROR": "unknown"
                  }
                },
                "merge_over": {
                  "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                  "type": "int[]"
                }
              },
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.VALUES2.TOTAL_VARIANCE"
            },
            "type": "SUM"
          }
        },
        {
          "fqid": "SOME_STATIC.VALUES2.VARIANCE",
          "inputs": {
            "x": {
              "expression": {
                "__reference__": "SOME_STATIC.VALUES2.TOTAL_VARIANCE.sum"
              },
              "type": "float"
            },
            "y": {
              "expression": {
                "__reference__": "SOME_STATIC.VALUES2.LEN.SUM.sum"
              },
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "z": {
                "__reference__": "SOME_STATIC.VALUES2.VARIANCE.MULTIPLY.product"
              }
            },
            "type": "DIVIDE"
          },
          "children": [
            {
              "fqid": "SOME_STATIC.VALUES2.VARIANCE.POW",
              "inputs": {
                "x": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES2.LEN.SUM.sum"
                  },
                  "type": "float"
                },
                "y": {
                  "expression": -1,
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES2.VARIANCE.POW"
                },
                "type": "POW"
              }
            },
            {
              "fqid": "SOME_STATIC.VALUES2.VARIANCE.MULTIPLY",
              "inputs": {
                "x": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES2.TOTAL_VARIANCE.sum"
                  },
                  "type": "float"
                },
                "y": {
                  "expression": {
                    "__reference__": "SOME_STATIC.VALUES2.VARIANCE.POW.z"
                  },
                  "type": "float"
                }
              },
              "outputs": {
                "expression": {
                  "__reference__": "SOME_STATIC.VALUES2.VARIANCE.MULTIPLY"
                },
                "type": "MULTIPLY"
              }
            }
          ]
        },
        {
          "fqid": "SOME_STATIC.VALUES2.STD_DEV",
          "inputs": {
            "x": {
              "expression": {
                "__reference__": "SOME_STATIC.VALUES2.VARIANCE.MULTIPLY.product"
              },
              "type": "float"
            },
            "y": {
              "expression": 0.5,
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.VALUES2.STD_DEV"
            },
            "type": "POW"
          }
        }
      ]
    },
    {
      "fqid": "SOME_STATIC.MAKE_CONST_ONE",
      "inputs": {
        "x": {
          "expression": {
            "call": "MAKE_CONST_ONE",
            "mode": "array",
            "split": {
              "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
              "mode": "array",
              "merge_value": {
                "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                "fork": {
                  "POW": "unknown"
                }
              },
              "merge_over": {
                "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                "type": "int[]"
              }
            }
          },
          "type": "float"
        }
      },
      "outputs": {
        "expression": {
          "one": 1,
          "one_array": {
            "__reference__": "SOME_STATIC.MAKE_CONST_ONE.RANGE.values"
          },
          "var_one": {
            "__reference__": "SOME_STATIC.MAKE_CONST_ONE.SUM.sum"
          },
          "x": {
            "call": "MAKE_CONST_ONE",
            "mode": "array",
            "split": {
              "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
              "mode": "array",
              "merge_value": {
                "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                "fork": {
                  "POW": "unknown"
                }
              },
              "merge_over": {
                "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                "type": "int[]"
              }
            }
          }
        },
        "type": "MAKE_CONST_ONE"
      },
      "fork_roots": [
        "SOME_STATIC.MAKE_CONST_ONE"
      ],
      "children": [
        {
          "fqid": "SOME_STATIC.MAKE_CONST_ONE.RANGE",
          "inputs": {
            "begin": {
              "expression": 1,
              "type": "float"
            },
            "end": {
              "expression": 2,
              "type": "float"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.MAKE_CONST_ONE.RANGE"
            },
            "type": "RANGE"
          }
        },
        {
          "fqid": "SOME_STATIC.MAKE_CONST_ONE.SUM",
          "inputs": {
            "x": {
              "expression": {
                "__reference__": "SOME_STATIC.MAKE_CONST_ONE.RANGE.values"
              },
              "type": "float[]"
            }
          },
          "outputs": {
            "expression": {
              "__reference__": "SOME_STATIC.MAKE_CONST_ONE.SUM"
            },
            "type": "SUM"
          }
        }
      ]
    },
    {
      "fqid": "SOME_STATIC.MAPPED_CONST_SUM",
      "comments": [
        "This can run before any stages from MAKE_CONST_ONE run, but must",
        "run after GENERATE_DISTRIBUTION.RANGE runs, in order for the array length",
        "to be known."
      ],
      "inputs": {
        "x": {
          "expression": {
            "call": "SOME_STATIC.MAKE_CONST_ONE",
            "mode": "array",
            "merge_value": 1,
            "merge_over": {
              "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
              "type": "int[]"
            },
            "fork_node": "SOME_STATIC.GENERATE_DISTRIBUTION.POW"
          },
          "type": "float[]"
        }
      },
      "outputs": {
        "expression": {
          "__reference__": "SOME_STATIC.MAPPED_CONST_SUM"
        },
        "type": "SUM"
      }
    },
    {
      "fqid": "SOME_STATIC.MAPPED_ARRAY_SUM",
      "comments": [
        "This runs before the MAKE_CONST_ONE pipeline has finished,",
        "because it does not depend on the last SUM stage in it."
      ],
      "inputs": {
        "x": {
          "expression": {
            "call": "MAPPED_ARRAY_SUM",
            "mode": "array",
            "split": {
              "call": "SOME_STATIC.MAKE_CONST_ONE",
              "mode": "array",
              "merge_value": {
                "__reference__": "SOME_STATIC.MAKE_CONST_ONE.RANGE.values"
              },
              "merge_over": {
                "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                "type": "int[]"
              },
              "fork_node": "SOME_STATIC.GENERATE_DISTRIBUTION.POW"
            },
            "source": {
              "call": "SOME_STATIC.GENERATE_DISTRIBUTION.POW",
              "mode": "array",
              "merge_value": {
                "__reference__": "SOME_STATIC.GENERATE_DISTRIBUTION.POW.z",
                "fork": {
                  "POW": "unknown"
                }
              },
              "merge_over": {
                "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
                "type": "int[]"
              }
            }
          },
          "type": "float[]"
        }
      },
      "outputs": {
        "expression": {
          "call": "SOME_STATIC.MAPPED_ARRAY_SUM",
          "mode": "array",
          "merge_value": {
            "__reference__": "SOME_STATIC.MAPPED_ARRAY_SUM",
            "fork": {
              "MAPPED_ARRAY_SUM": "unknown"
            }
          },
          "merge_over": {
            "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
            "type": "int[]"
          }
        },
        "type": "SUM[]"
      },
      "fork_roots": [
        "SOME_STATIC.MAPPED_ARRAY_SUM"
      ]
    },
    {
      "fqid": "SOME_STATIC.MAPPED_VAR_SUM",
      "inputs": {
        "x": {
          "expression": {
            "call": "SOME_STATIC.MAPPED_ARRAY_SUM",
            "mode": "array",
            "merge_value": {
              "__reference__": "SOME_STATIC.MAPPED_ARRAY_SUM.sum",
              "fork": {
                "MAPPED_ARRAY_SUM": "unknown"
              }
            },
            "merge_over": {
              "ref": "SOME_STATIC.GENERATE_DISTRIBUTION.RANGE.values",
              "type": "int[]"
            }
          },
          "type": "float[]"
        }
      },
      "outputs": {
        "expression": {
          "__reference__": "SOME_STATIC.MAPPED_VAR_SUM"
        },
        "type": "SUM"
      }
    },
    {
      "fqid": "SOME_STATIC.RESHAPE",
      "inputs": {
        "data": {
          "expression": {
            "call": "RESHAPE",
            "mode": "array",
            "split": [
              1,
              3,
              4,
              5,
              7
            ]
          },
          "type": "float"
        }
      },
      "outputs": {
        "expression": [
          {
            "data": [
              1
            ]
          },
          {
            "data": [
              3
            ]
          },
          {
            "data": [
              4
            ]
          },
          {
            "data": [
              5
            ]
          },
          {
            "data": [
              7
            ]
          }
        ],
        "type": "RESHAPE[]"
      },
      "children": null
    }
  ]
}
