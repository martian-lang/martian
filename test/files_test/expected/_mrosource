#
# @include "stages/stages.mro"
#

# Files storing json.
filetype json;

# Adds a key to the json in a file.
stage ADD_KEY(
    # The key to add
    in  string key,
    # The value to add for this key.
    in  string value,
    # The file to read the initial dictionary from.
    in  json   start,
    # The output file.
    out json   result,
    # The source file.
    src py     "add_key",
) using (
    mem_gb = 1,
)

# Takes two files containing json dictionaries and merges them.
stage MERGE_JSON(
    in  json[] inputs,
    out json   result  "The final merged result."  "merged.json",
    src py     "merge_json",
) using (
    mem_gb = 1,
)

#
# @include "pipeline.mro"
#

# Adds some keys to some json files and then merges them.
pipeline AWESOME(
    in  string key1,
    in  string value1,
    in  string key2,
    in  string value2,
    out json   outfile,
)
{
    call ADD_KEY as ADD_KEY1(
        key   = self.key1,
        value = self.value1,
        start = null,
    ) using (
        volatile = true,
    )

    call ADD_KEY as ADD_KEY2(
        key   = self.key2,
        value = self.value2,
        start = ADD_KEY1.result,
    ) using (
        volatile = true,
    )

    call ADD_KEY as ADD_KEY3(
        key   = "3",
        value = "three",
        start = ADD_KEY2.result,
    ) using (
        volatile = true,
    )

    call ADD_KEY as ADD_KEY4(
        key   = "4",
        value = "four",
        start = ADD_KEY2.result,
    ) using (
        volatile = true,
    )

    call MERGE_JSON(
        inputs = [
            ADD_KEY3.result,
            ADD_KEY4.result,
        ],
    ) using (
        volatile = true,
    )

    return (
        outfile = MERGE_JSON.result,
    )
}

#
# @include "call.mro"
#

# Calls the pipelines, sweeping over two forks.
call AWESOME(
    key1   = "1",
    value1 = "premi√®re",
    key2   = "2",
    value2 = "two",
)
